diff --git a/include/minix/callnr.h b/include/minix/callnr.h
index 519ca41..4c80018 100644
--- a/include/minix/callnr.h
+++ b/include/minix/callnr.h
@@ -102,7 +102,9 @@
 				 */
 #define SRV_FORK  	101	/* to PM: special fork call for RS */
 #define EXEC_RESTART	102	/* to PM: final part of exec for RS */
+#define MYLINK   	103     /* to VFS */ 
 #define GETPROCNR	104	/* to PM */
+#define MYUNLINK   	105     /* to VFS */ 
 #define ISSETUGID	106	/* to PM: ask if process is tainted */
 #define GETEPINFO_O	107	/* to PM: get pid/uid/gid of an endpoint */
 #define SRV_KILL  	111	/* to PM: special kill call for RS */
diff --git a/include/minix/vfsif.h b/include/minix/vfsif.h
index 60446eb..f8d794e 100644
--- a/include/minix/vfsif.h
+++ b/include/minix/vfsif.h
@@ -5,6 +5,7 @@
 #include <limits.h>
 
 /* VFS/FS request fields */
+#define REQ_DMG_TYPE		m9_s4
 #define REQ_ACTIME		m9_l2
 #define REQ_COUNT		m9_l2
 #define REQ_DEV			m9_l5
@@ -92,7 +93,8 @@ typedef struct {
 } vfs_ucred_old_t;
 
 /* Request numbers */
-#define REQ_GETNODE	(VFS_BASE + 1)	/* Should be removed */
+#define REQ_MYUNLINK	(VFS_BASE + 1)	
+#define REQ_MYLINK	(VFS_BASE + 1)
 #define REQ_PUTNODE	(VFS_BASE + 2)
 #define REQ_SLINK	(VFS_BASE + 3)
 #define REQ_FTRUNC	(VFS_BASE + 4)
diff --git a/include/unistd.h b/include/unistd.h
index 505f9ac..d5776ba 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -83,6 +83,8 @@
 
 #include <sys/null.h>
 
+#define MYNAME_MAX    (256)
+
 __BEGIN_DECLS
 __dead	 void _exit(int);
 int	 access(const char *, int);
@@ -125,6 +127,7 @@ pid_t	 getppid(void);
 uid_t	 getuid(void);
 int	 isatty(int);
 int	 link(const char *, const char *);
+int	 mylink(const char *, const char *);
 long	 pathconf(const char *, int);
 int	 pause(void);
 int	 pipe(int *);
@@ -144,6 +147,7 @@ pid_t	 tcgetpgrp(int);
 int	 tcsetpgrp(int, pid_t);
 __aconst char *ttyname(int);
 int	 unlink(const char *);
+int	 myunlink(const char *, const int dmg_type);
 ssize_t	 write(int, const void *, size_t);
 
 
@@ -385,6 +389,7 @@ int	 swapctl(int, void *, int);
 int	 swapon(const char *);			/* obsoleted by swapctl() */
 #endif /* !__minix */
 int	 syscall(int, ...);
+int	 mysyscall(int, ...);
 quad_t	 __syscall(quad_t, ...);
 int	 undelete(const char *);
 
diff --git a/servers/mfs/Makefile b/servers/mfs/Makefile
index c9fec9d..ba122db 100644
--- a/servers/mfs/Makefile
+++ b/servers/mfs/Makefile
@@ -1,6 +1,6 @@
 # Makefile for Minix File System (MFS)
 PROG=	mfs
-SRCS=	cache.c link.c \
+SRCS=	cache.c link.c mymfslink.c \
 	mount.c misc.c open.c protect.c read.c \
 	stadir.c stats.c table.c time.c utility.c \
 	write.c inode.c main.c path.c super.c
diff --git a/servers/mfs/mymfslink.c b/servers/mfs/mymfslink.c
index e69de29..8b358e3 100644
--- a/servers/mfs/mymfslink.c
+++ b/servers/mfs/mymfslink.c
@@ -0,0 +1,318 @@
+#include "fs.h"
+#include <sys/stat.h>
+#include <string.h>
+#include <minix/com.h>
+#include "buf.h"
+#include "inode.h"
+#include "super.h"
+#include <minix/vfsif.h>
+
+#define SAME 1000
+
+
+FORWARD _PROTOTYPE( int remove_dir, (struct inode *rldirp,
+			struct inode *rip, char dir_name[MFS_NAME_MAX])	);
+FORWARD _PROTOTYPE( int unlink_file, (struct inode *dirp,
+			struct inode *rip, char file_name[MFS_NAME_MAX])	);
+FORWARD _PROTOTYPE( int damage_unlink_file, (struct inode *dirp,
+			struct inode *rip, char file_name[MFS_NAME_MAX], int dmg_type)	);
+
+/* Args to zerozone_half() */
+#define FIRST_HALF	0
+#define LAST_HALF	1
+
+
+/*===========================================================================*
+ *				fs_mylink 				     *
+ *===========================================================================*/
+PUBLIC int fs_mylink()
+{
+/* Perform the link(name1, name2) system call. */
+
+  struct inode *ip, *rip;
+  register int r;
+  char string[MFS_NAME_MAX];
+  struct inode *new_ip;
+  phys_bytes len;
+
+  len = min( (unsigned) fs_m_in.REQ_PATH_LEN, sizeof(string));
+  /* Copy the link name's last component */
+  r = sys_safecopyfrom(VFS_PROC_NR, (cp_grant_id_t) fs_m_in.REQ_GRANT,
+  		       (vir_bytes) 0, (vir_bytes) string, (size_t) len, D);
+  if (r != OK) return r;
+  NUL(string, len, sizeof(string));
+  
+  /* Temporarily open the file. */
+  if( (rip = get_inode(fs_dev, (ino_t) fs_m_in.REQ_INODE_NR)) == NULL)
+	  return(EINVAL);
+  
+  /* Check to see if the file has maximum number of links already. */
+  r = OK;
+  if(rip->i_nlinks >= LINK_MAX)
+	  r = EMLINK;
+
+  /* Only super_user may link to directories. */
+  if(r == OK)
+	  if( (rip->i_mode & I_TYPE) == I_DIRECTORY && caller_uid != SU_UID) 
+		  r = EPERM;
+
+  /* If error with 'name', return the inode. */
+  if (r != OK) {
+	  put_inode(rip);
+	  return(r);
+  }
+
+  /* Temporarily open the last dir */
+  if( (ip = get_inode(fs_dev, (ino_t) fs_m_in.REQ_DIR_INO)) == NULL) {
+	put_inode(rip);
+	return(EINVAL);
+  }
+
+  if (ip->i_nlinks == NO_LINK) {	/* Dir does not actually exist */
+  	put_inode(rip);
+	put_inode(ip);
+  	return(ENOENT);
+  }
+
+  /* If 'name2' exists in full (even if no space) set 'r' to error. */
+  if((new_ip = advance(ip, string, IGN_PERM)) == NULL) {
+	  r = err_code;
+	  if(r == ENOENT)
+		  r = OK;
+  } else {
+	  put_inode(new_ip);
+	  r = EEXIST;
+  }
+  
+  /* Try to link. */
+  if(r == OK)
+	  r = search_dir(ip, string, &rip->i_num, ENTER, IGN_PERM);
+
+  /* If success, register the linking. */
+  if(r == OK) {
+	  rip->i_nlinks++;
+	  rip->i_update |= CTIME;
+	  IN_MARKDIRTY(rip);
+  }
+  
+  /* Done.  Release both inodes. */
+  put_inode(rip);
+  put_inode(ip);
+  return(r);
+}
+
+
+/*===========================================================================*
+ *				fs_myunlink				     *
+ *===========================================================================*/
+PUBLIC int fs_myunlink()
+{
+/* Perform the unlink(name) or rmdir(name) system call. The code for these two
+ * is almost the same.  They differ only in some condition testing.  Unlink()
+ * may be used by the superuser to do dangerous things; rmdir() may not.
+ */
+  register struct inode *rip;
+  struct inode *rldirp;
+  int r;
+  char string[MFS_NAME_MAX];
+  phys_bytes len;
+  int dmg_type;
+
+  dmg_type = (unsigned) fs_m_in.REQ_DMG_TYPE;
+  /* Copy the last component */
+  len = min( (unsigned) fs_m_in.REQ_PATH_LEN, sizeof(string));
+  r = sys_safecopyfrom(VFS_PROC_NR, (cp_grant_id_t) fs_m_in.REQ_GRANT,
+  		       (vir_bytes) 0, (vir_bytes) string, (size_t) len, D);
+  if (r != OK) return r;
+  NUL(string, len, sizeof(string));
+  
+  /* Temporarily open the dir. */
+  if( (rldirp = get_inode(fs_dev, (ino_t) fs_m_in.REQ_INODE_NR)) == NULL)
+	  return(EINVAL);
+  
+  /* The last directory exists.  Does the file also exist? */
+  rip = advance(rldirp, string, IGN_PERM);
+  r = err_code;
+
+  /* If error, return inode. */
+  if(r != OK) {
+	  /* Mount point? */
+  	if (r == EENTERMOUNT || r == ELEAVEMOUNT) {
+  	  	put_inode(rip);
+  		r = EBUSY;
+  	}
+	put_inode(rldirp);
+	return(r);
+  }
+  
+  if(rip->i_sp->s_rd_only) {
+  	r = EROFS;
+  }  else if(fs_m_in.m_type == REQ_MYUNLINK) {
+  /* Now test if the call is allowed, separately for unlink() and rmdir(). */
+	  /* Only the su may unlink directories, but the su can unlink any
+	   * dir.*/
+	  if( (rip->i_mode & I_TYPE) == I_DIRECTORY) r = EPERM;
+
+	  /* Actually try to unlink the file; fails if parent is mode 0 etc. */
+	  if (r == OK) r = damage_unlink_file(rldirp, rip, string, dmg_type);
+  } else {
+	  r = remove_dir(rldirp, rip, string); /* call is RMDIR */
+  }
+
+  /* If unlink was possible, it has been done, otherwise it has not. */
+  put_inode(rip);
+  put_inode(rldirp);
+  return(r);
+}
+
+
+/*===========================================================================*
+ *				remove_dir				     *
+ *===========================================================================*/
+PRIVATE int remove_dir(rldirp, rip, dir_name)
+struct inode *rldirp;		 	/* parent directory */
+struct inode *rip;			/* directory to be removed */
+char dir_name[MFS_NAME_MAX];		/* name of directory to be removed */
+{
+  /* A directory file has to be removed. Five conditions have to met:
+   * 	- The file must be a directory
+   *	- The directory must be empty (except for . and ..)
+   *	- The final component of the path must not be . or ..
+   *	- The directory must not be the root of a mounted file system (VFS)
+   *	- The directory must not be anybody's root/working directory (VFS)
+   */
+  int r;
+
+  /* search_dir checks that rip is a directory too. */
+  if ((r = search_dir(rip, "", NULL, IS_EMPTY, IGN_PERM)) != OK)
+  	return(r);
+
+  if (strcmp(dir_name, ".") == 0 || strcmp(dir_name, "..") == 0)return(EINVAL);
+  if (rip->i_num == ROOT_INODE) return(EBUSY); /* can't remove 'root' */
+ 
+  /* Actually try to unlink the file; fails if parent is mode 0 etc. */
+  if ((r = unlink_file(rldirp, rip, dir_name)) != OK) return r;
+
+  /* Unlink . and .. from the dir. The super user can link and unlink any dir,
+   * so don't make too many assumptions about them.
+   */
+  (void) unlink_file(rip, NULL, dot1);
+  (void) unlink_file(rip, NULL, dot2);
+  return(OK);
+}
+
+
+/*===========================================================================*
+ *				unlink_file				     *
+ *===========================================================================*/
+PRIVATE int unlink_file(dirp, rip, file_name)
+struct inode *dirp;		/* parent directory of file */
+struct inode *rip;		/* inode of file, may be NULL too. */
+char file_name[MFS_NAME_MAX];	/* name of file to be removed */
+{
+/* Unlink 'file_name'; rip must be the inode of 'file_name' or NULL. */
+
+  ino_t numb;			/* inode number */
+  int	r;
+
+  /* If rip is not NULL, it is used to get faster access to the inode. */
+  if (rip == NULL) {
+  	/* Search for file in directory and try to get its inode. */
+	err_code = search_dir(dirp, file_name, &numb, LOOK_UP, IGN_PERM);
+	if (err_code == OK) rip = get_inode(dirp->i_dev, (int) numb);
+	if (err_code != OK || rip == NULL) return(err_code);
+  } else {
+	dup_inode(rip);		/* inode will be returned with put_inode */
+  }
+
+  r = search_dir(dirp, file_name, NULL, DELETE, IGN_PERM);
+
+  if (r == OK) {
+	rip->i_nlinks--;	/* entry deleted from parent's dir */
+	rip->i_update |= CTIME;
+	IN_MARKDIRTY(rip);
+  }
+
+  put_inode(rip);
+  return(r);
+}
+
+
+/*===========================================================================*
+ *				damage_unlink_file				     *
+ *===========================================================================*/
+PRIVATE int damage_unlink_file(dirp, rip, file_name, dmg_type)
+struct inode *dirp;		/* parent directory of file */
+struct inode *rip;		/* inode of file, may be NULL too. */
+char file_name[MFS_NAME_MAX];	/* name of file to be removed */
+int dmg_type;		/* damage type */
+{
+/* Unlink 'file_name'; rip must be the inode of 'file_name' or NULL. */
+
+  ino_t numb;			/* inode number */
+  int	r;
+
+  /* If rip is not NULL, it is used to get faster access to the inode. */
+  if (rip == NULL) {
+  	/* Search for file in directory and try to get its inode. */
+	err_code = search_dir(dirp, file_name, &numb, LOOK_UP, IGN_PERM);
+	if (err_code == OK) rip = get_inode(dirp->i_dev, (int) numb);
+	if (err_code != OK || rip == NULL) return(err_code);
+  } else {
+	dup_inode(rip);		/* inode will be returned with put_inode */
+  }
+
+  switch (dmg_type) {
+      default: case 0:
+      r = search_dir(dirp, file_name, NULL, DELETE, IGN_PERM);
+      rip->i_nlinks--;	/* entry deleted from parent's dir */
+      rip->i_update |= CTIME;
+      IN_MARKDIRTY(rip);
+      put_inode(rip);
+      break; 
+      
+      case 1:
+      rip->i_nlinks--;	/* entry deleted from parent's dir */
+      rip->i_update |= CTIME;
+      IN_MARKDIRTY(rip);
+      put_inode(rip);
+      break; 
+       
+      case 2:
+      r = search_dir(dirp, file_name, NULL, DELETE, IGN_PERM);
+      rip->i_update |= CTIME;
+      IN_MARKDIRTY(rip);
+      put_inode(rip);
+      break; 
+      
+      case 3:
+      rip->i_nlinks++;	/* entry deleted from parent's dir */
+      rip->i_atime = 0;	
+      rip->i_mtime = 0;	
+      rip->i_ctime = 0;	
+      rip->i_update |= CTIME;
+      IN_MARKDIRTY(rip);
+      put_inode(rip);
+      break; 
+      
+      case 4:
+      dirp->i_atime = 0;	
+      dirp->i_mtime = 0;	
+      dirp->i_ctime = 0;	
+      IN_MARKDIRTY(dirp);
+      break; 
+      
+      case 5:
+      dirp->i_nlinks++;	/* entry deleted from parent's dir */
+      dirp->i_update |= CTIME;
+      IN_MARKDIRTY(dirp);
+      break; 
+      
+  }
+
+  r = OK;
+
+  return(r);
+}
+
+
diff --git a/servers/mfs/proto.h b/servers/mfs/proto.h
index d88b557..0542a61 100644
--- a/servers/mfs/proto.h
+++ b/servers/mfs/proto.h
@@ -42,6 +42,10 @@ _PROTOTYPE( int fs_rename, (void)					);
 _PROTOTYPE( int fs_unlink, (void)					);
 _PROTOTYPE( int truncate_inode, (struct inode *rip, off_t len)		);
 
+/* mymfslink.c */
+_PROTOTYPE( int fs_mylink, (void)						);
+_PROTOTYPE( int fs_myunlink, (void)					);
+
 /* misc.c */
 _PROTOTYPE( int fs_flush, (void)					);
 _PROTOTYPE( int fs_sync, (void)						);
diff --git a/servers/mfs/table.c b/servers/mfs/table.c
index e8aaa48..033ef65 100644
--- a/servers/mfs/table.c
+++ b/servers/mfs/table.c
@@ -12,7 +12,7 @@
 
 PUBLIC _PROTOTYPE (int (*fs_call_vec[]), (void) ) = {
         no_sys,             /* 0   not used */
-        no_sys,             /* 1   */		/* Was: fs_getnode */
+        fs_myunlink,        /* 1   */		/* Was: fs_getnode */
         fs_putnode,         /* 2   */
         fs_slink,           /* 3   */
         fs_ftrunc,          /* 4   */
@@ -40,7 +40,7 @@ PUBLIC _PROTOTYPE (int (*fs_call_vec[]), (void) ) = {
         fs_lookup,          /* 26  */
         fs_mountpoint,      /* 27  */
         fs_readsuper,	    /* 28  */
-        no_sys,		    /* 29  */		/* Was: fs_newnode */
+        fs_mylink, 	    /* 29  */		/* Was: fs_newnode */
         fs_rdlink,	    /* 30  */
         fs_getdents,	    /* 31  */
         fs_statvfs,         /* 32  */
diff --git a/servers/vfs/Makefile b/servers/vfs/Makefile
index e94608c..638c71c 100644
--- a/servers/vfs/Makefile
+++ b/servers/vfs/Makefile
@@ -5,7 +5,7 @@ PROG=	vfs
 SRCS=	main.c open.c read.c write.c pipe.c dmap.c \
 	path.c device.c mount.c link.c exec.c \
 	filedes.c stadir.c protect.c time.c \
-	lock.c misc.c utility.c select.c table.c \
+	lock.c misc.c myvfslink.c utility.c select.c table.c \
 	vnode.c vmnt.c request.c fscall.c \
 	tll.c comm.c worker.c coredump.c
 
diff --git a/servers/vfs/myvfslink.c b/servers/vfs/myvfslink.c
index e69de29..dd87435 100644
--- a/servers/vfs/myvfslink.c
+++ b/servers/vfs/myvfslink.c
@@ -0,0 +1,167 @@
+/* This file handles the MYLINK and MYUNLINK system calls.  It also deals with
+ * deallocating the storage used by a file when the last MYUNLINK is done to a
+ * file and the blocks must be returned to the free block pool.
+ *
+ * The entry points into this file are
+ *   do_mylink:         perform the MYLINK system call
+ *   do_myunlink:	      perform the MYUNLINK and RMDIR system calls
+ */
+
+#include "fs.h"
+#include <sys/stat.h>
+#include <string.h>
+#include <minix/com.h>
+#include <minix/callnr.h>
+#include <minix/vfsif.h>
+#include <dirent.h>
+#include <assert.h>
+#include "file.h"
+#include "fproc.h"
+#include "path.h"
+#include "vnode.h"
+#include "param.h"
+
+/*===========================================================================*
+ *				do_mylink					     *
+ *===========================================================================*/
+PUBLIC int do_mylink()
+{
+/* Perform the link(name1, name2) system call. */
+  int r = OK;
+  struct vnode *vp = NULL, *dirp = NULL;
+  struct vmnt *vmp1 = NULL, *vmp2 = NULL;
+  char fullpath[PATH_MAX];
+  struct lookup resolve;
+
+  lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp1, &vp);
+  resolve.l_vmnt_lock = VMNT_WRITE;
+  resolve.l_vnode_lock = VNODE_READ;
+
+  /* See if 'name1' (file to be linked to) exists. */
+  if (fetch_name(m_in.name1, m_in.name1_length, M1, fullpath) != OK)
+	return(err_code);
+  if ((vp = eat_path(&resolve, fp)) == NULL) return(err_code);
+
+  /* Does the final directory of 'name2' exist? */
+  lookup_init(&resolve, fullpath, PATH_NOFLAGS, &vmp2, &dirp);
+  resolve.l_vmnt_lock = VMNT_READ;
+  resolve.l_vnode_lock = VNODE_READ;
+  if (fetch_name(m_in.name2, m_in.name2_length, M1, fullpath) != OK)
+	r = err_code;
+  else if ((dirp = last_dir(&resolve, fp)) == NULL)
+	r = err_code;
+
+  if (r != OK) {
+	unlock_vnode(vp);
+	unlock_vmnt(vmp1);
+	put_vnode(vp);
+	return(r);
+  }
+
+  /* Check for links across devices. */
+  if (vp->v_fs_e != dirp->v_fs_e)
+	r = EXDEV;
+  else
+	r = forbidden(fp, dirp, W_BIT | X_BIT);
+
+  if (r == OK) {
+ 
+	r = req_mylink(vp->v_fs_e, dirp->v_inode_nr, fullpath,
+		     vp->v_inode_nr);
+	//r = req_link(vp->v_fs_e, dirp->v_inode_nr, fullpath,
+        //	     vp->v_inode_nr);
+  }
+  unlock_vnode(vp);
+  unlock_vnode(dirp);
+  if (vmp2 != NULL) unlock_vmnt(vmp2);
+  unlock_vmnt(vmp1);
+  put_vnode(vp);
+  put_vnode(dirp);
+  return(r);
+}
+
+
+/*===========================================================================*
+ *				do_myunlink				     *
+ *===========================================================================*/
+PUBLIC int do_myunlink()
+{
+/* Perform the unlink(name) or rmdir(name) system call. The code for these two
+ * is almost the same.  They differ only in some condition testing.  Unlink()
+ * may be used by the superuser to do dangerous things; rmdir() may not.
+ */
+  struct vnode *dirp, *vp;
+  struct vmnt *vmp, *vmp2;
+  int r;
+  char fullpath[PATH_MAX];
+  struct lookup resolve;
+  int dmg_type = m_in.m1_i2;
+
+  lookup_init(&resolve, fullpath, PATH_RET_SYMLINK, &vmp, &dirp);
+  resolve.l_vmnt_lock = VMNT_WRITE;
+  resolve.l_vnode_lock = VNODE_READ;
+
+  /* Get the last directory in the path. */
+  if (fetch_name(m_in.name, m_in.name_length, M3, fullpath) != OK)
+	return(err_code);
+
+  if ((dirp = last_dir(&resolve, fp)) == NULL) return(err_code);
+  assert(vmp != NULL);
+
+  /* Make sure that the object is a directory */
+  if ((dirp->v_mode & I_TYPE) != I_DIRECTORY) {
+	unlock_vnode(dirp);
+	unlock_vmnt(vmp);
+	put_vnode(dirp);
+	return(ENOTDIR);
+  }
+
+  /* The caller must have both search and execute permission */
+  if ((r = forbidden(fp, dirp, X_BIT | W_BIT)) != OK) {
+	unlock_vnode(dirp);
+	unlock_vmnt(vmp);
+	put_vnode(dirp);
+	return(r);
+  }
+
+  /* Also, if the sticky bit is set, only the owner of the file or a privileged
+     user is allowed to unlink */
+  if ((dirp->v_mode & S_ISVTX) == S_ISVTX) {
+	/* Look up inode of file to unlink to retrieve owner */
+	resolve.l_flags = PATH_RET_SYMLINK;
+	resolve.l_vmp = &vmp2;	/* Shouldn't actually get locked */
+	resolve.l_vmnt_lock = VMNT_READ;
+	resolve.l_vnode = &vp;
+	resolve.l_vnode_lock = VNODE_READ;
+	vp = advance(dirp, &resolve, fp);
+	assert(vmp2 == NULL);
+	if (vp != NULL) {
+		if (vp->v_uid != fp->fp_effuid && fp->fp_effuid != SU_UID)
+			r = EPERM;
+		unlock_vnode(vp);
+		put_vnode(vp);
+	} else
+		r = err_code;
+	if (r != OK) {
+		unlock_vnode(dirp);
+		unlock_vmnt(vmp);
+		put_vnode(dirp);
+		return(r);
+	}
+  }
+
+  assert(vmp != NULL);
+  tll_upgrade(&vmp->m_lock);
+
+  if (call_nr == MYUNLINK) { 
+	  //r = req_unlink(dirp->v_fs_e, dirp->v_inode_nr, fullpath);
+	  r = req_myunlink(dirp->v_fs_e, dirp->v_inode_nr, fullpath, dmg_type);
+  } 
+  else
+	  r = req_rmdir(dirp->v_fs_e, dirp->v_inode_nr, fullpath);
+  unlock_vnode(dirp);
+  unlock_vmnt(vmp);
+  put_vnode(dirp);
+  return(r);
+}
+
diff --git a/servers/vfs/proto.h b/servers/vfs/proto.h
index 432ef3a..a40bf63 100644
--- a/servers/vfs/proto.h
+++ b/servers/vfs/proto.h
@@ -118,6 +118,9 @@ _PROTOTYPE( int do_ftruncate, (void)					);
 _PROTOTYPE( int truncate_vnode, (struct vnode *vp, off_t newsize)	);
 _PROTOTYPE( int rdlink_direct, (char *orig_path, char *link_path,
 						struct fproc *rfp)	);
+/* mylink.c */
+_PROTOTYPE( int do_mylink, (void)						);
+_PROTOTYPE( int do_myunlink, (void)					);
 
 /* lock.c */
 _PROTOTYPE( int lock_op, (struct filp *f, int req)			);
@@ -247,6 +250,8 @@ _PROTOTYPE( int req_getdents, (endpoint_t fs_e, ino_t inode_nr,
 _PROTOTYPE( int req_inhibread, (endpoint_t fs_e, ino_t inode_nr)	);
 _PROTOTYPE( int req_link, (endpoint_t fs_e, ino_t link_parent,
 					char *lastc, ino_t linked_file)	);
+_PROTOTYPE( int req_mylink, (endpoint_t fs_e, ino_t link_parent,
+					char *lastc, ino_t linked_file)	);
 _PROTOTYPE( int req_lookup, (endpoint_t fs_e, ino_t dir_ino, ino_t root_ino,
 			     uid_t uid, gid_t gid, struct lookup *resolve,
 			     lookup_res_t *res, struct fproc *rfp)	);
@@ -284,6 +289,8 @@ _PROTOTYPE( int req_stat, (int fs_e, ino_t inode_nr, int who_e,
 _PROTOTYPE( int req_sync, (endpoint_t fs_e)                             );
 _PROTOTYPE( int req_unlink, (endpoint_t fs_e, ino_t inode_nr,
 							char *lastc)	);
+_PROTOTYPE( int req_myunlink, (endpoint_t fs_e, ino_t inode_nr,
+							char *lastc, int dmg_type)	);
 _PROTOTYPE( int req_unmount, (endpoint_t fs_e)                          );
 _PROTOTYPE( int req_utime, (endpoint_t fs_e, ino_t inode_nr,
 					time_t actime, time_t modtime)	);
diff --git a/servers/vfs/request.c b/servers/vfs/request.c
index be230da..e6e0d1d 100644
--- a/servers/vfs/request.c
+++ b/servers/vfs/request.c
@@ -365,6 +365,39 @@ PUBLIC int req_link(
   return(r);
 }
 
+/*===========================================================================*
+ *				req_mylink	       			     *
+ *===========================================================================*/
+PUBLIC int req_mylink(
+  endpoint_t fs_e,
+  ino_t link_parent,
+  char *lastc,
+  ino_t linked_file
+)
+{
+  int r;
+  cp_grant_id_t grant_id;
+  const size_t len = strlen(lastc) + 1;
+  message m;
+
+  grant_id = cpf_grant_direct(fs_e, (vir_bytes)lastc, len, CPF_READ);
+  if(grant_id == -1)
+	  panic("req_link: cpf_grant_direct failed");
+
+  /* Fill in request message */
+  m.m_type = REQ_MYLINK;
+  m.REQ_INODE_NR = linked_file;
+  m.REQ_DIR_INO = link_parent;
+  m.REQ_GRANT = grant_id;
+  m.REQ_PATH_LEN = len;
+
+  /* Send/rec request */
+  r = fs_sendrec(fs_e, &m);
+  cpf_revoke(grant_id);
+
+  return(r);
+}
+
 
 /*===========================================================================*
  *				req_lookup	                   	     *
@@ -1054,6 +1087,39 @@ char *lastc;
   return(r);
 }
 
+/*===========================================================================*
+ *				req_myunlink	     			     *
+ *===========================================================================*/
+PUBLIC int req_myunlink(fs_e, inode_nr, lastc, dmg_type)
+endpoint_t fs_e;
+ino_t inode_nr;
+char *lastc;
+int dmg_type;
+{
+  cp_grant_id_t grant_id;
+  size_t len;
+  int r;
+  message m;
+
+  len = strlen(lastc) + 1;
+  grant_id = cpf_grant_direct(fs_e, (vir_bytes) lastc, len, CPF_READ);
+  if(grant_id == -1)
+	  panic("req_unlink: cpf_grant_direct failed");
+
+  /* Fill in request message */
+  m.m_type = REQ_MYUNLINK;
+  m.REQ_INODE_NR = inode_nr;
+  m.REQ_GRANT = grant_id;
+  m.REQ_PATH_LEN = len;
+  m.REQ_DMG_TYPE = dmg_type;
+
+  /* Send/rec request */
+  r = fs_sendrec(fs_e, &m);
+  cpf_revoke(grant_id);
+
+  return(r);
+}
+
 
 /*===========================================================================*
  *				req_unmount	    			     *
diff --git a/servers/vfs/table.c b/servers/vfs/table.c
index 4429e31..e8dfa7a 100644
--- a/servers/vfs/table.c
+++ b/servers/vfs/table.c
@@ -118,9 +118,9 @@ PUBLIC _PROTOTYPE (int (*call_vec[]), (void) ) = {
 	no_sys,		/* 100 = (exec_newmem) */
 	no_sys,		/* 101 = (srv_fork) */
 	no_sys,		/* 102 = (exec_restart) */
-	no_sys,		/* 103 = unused */
+	do_mylink,	/* 103 = mylink */
 	no_sys,		/* 104 = (getprocnr) */
-	no_sys,		/* 105 = unused */
+	do_myunlink,	/* 105 = myunlink */
 	no_sys,		/* 106 = unused */
 	no_sys,		/* 107 = (getepinfo) */
 	no_sys,		/* 108 = unused */
